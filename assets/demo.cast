{"version": 2, "width": 124, "height": 80, "timestamp": 1743393279, "env": {"SHELL": "/bin/bash", "TERM": "xterm-256color"}}
[0.353638, "o", "\u001b[?2004h\u001b[0;32mmuaddib\u001b[0;36m@amtal \u001b[0m➜ \u001b[1;34m~/work/moberg/autodoc/acme-native \u001b[0;36m(\u001b[1;31mui-refactor\u001b[0;36m) \u001b[0m\r\r\n$ "]
[1.516147, "o", "d"]
[1.578134, "o", "u"]
[1.785286, "o", "m"]
[2.000819, "o", "p"]
[2.277299, "o", " "]
[2.41747, "o", "-"]
[2.650756, "o", "h"]
[2.911955, "o", "\r\n"]
[2.91223, "o", "\u001b[?2004l\r"]
[2.916104, "o", "usage: dump [options] [patterns]\r\n\r\ndescription:\r\n  recursively dumps text files under the current directory (or --dir),\r\n  respecting .gitignore and custom ignore rules. positional patterns\r\n  are treated as path match filters (e.g., \"*.kt\", \"**/Foo.kt\").\r\n\r\noptions:\r\n  -d, --dir <path>      base directory to scan (default: current directory)\r\n  -i, --ignore <pat>    glob pattern to ignore (can be repeated)\r\n  -f, --filter <regex>  skip lines matching this regex\r\n  -h, --help            display this help message\r\n"]
[2.93698, "o", "\u001b[?2004h\u001b[0;32mmuaddib\u001b[0;36m@amtal \u001b[0m➜ \u001b[1;34m~/work/moberg/autodoc/acme-native \u001b[0;36m(\u001b[1;31mui-refactor\u001b[0;36m) \u001b[0m\r\r\n$ "]
[3.999915, "o", "d"]
[4.118687, "o", "u"]
[4.433062, "o", "m"]
[4.65581, "o", "p"]
[5.618959, "o", " "]
[6.316063, "o", "'"]
[7.122409, "o", "*"]
[7.271023, "o", "*"]
[7.634072, "o", "."]
[7.96716, "o", "k"]
[8.864259, "o", "t"]
[9.663908, "o", "'"]
[11.452137, "o", " "]
[11.713567, "o", "|"]
[11.850146, "o", " "]
[12.789066, "o", "g"]
[12.922447, "o", "r"]
[13.129208, "o", "e"]
[13.305712, "o", "p"]
[13.444965, "o", " "]
[13.612698, "o", "'"]
[14.532977, "o", "^"]
[14.793212, "o", "<"]
[15.1987, "o", "f"]
[15.338907, "o", "i"]
[15.531736, "o", "l"]
[15.57953, "o", "e"]
[16.298478, "o", "'"]
[17.017048, "o", "\r\n"]
[17.017356, "o", "\u001b[?2004l\r"]
[17.158792, "o", "\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/AcmeActivity.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/AcmeService.kt'>\r\n"]
[17.15901, "o", "\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/data/network/BleJob.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/data/network/BleManager.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/data/recording/AcmeDatabase.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/data/nfc/NfcModel.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/data/AppContainer.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/data/nfc/NfcManager.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/data/nfc/NfcRepository.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/data/nfc/NfcCoordinator.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/AcmeApplication.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/data/network/BleResponse.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/data/network/WiFiManager.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/data/recording/RecordingRepository.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/data/recording/NotificationHelper.kt'>\r\n"]
[17.159116, "o", "\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/data/recording/ExportWorker.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/data/recording/RecordingManager.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/data/sensor/SensorCredentialsStore.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/data/sensor/SensorDataLogger.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/data/sensor/SensorDevice.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/data/sensor/SensorModel.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/data/sensor/SensorManager.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/data/sensor/builtin/PhoneMicRecorder.kt'>\r\n"]
[17.15918, "o", "\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/data/sensor/gopro/GoProDevice.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/data/sensor/masimo/EmmaFrameParser.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/data/sensor/masimo/EmmaDevice.kt'>\r\n"]
[17.159223, "o", "\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/data/sensor/masimo/MightySatResponseAggregator.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/data/sensor/masimo/MightySatDevice.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/data/sensor/movella/MovellaDevice.kt'>\r\n"]
[17.159261, "o", "\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/data/sensor/movella/MovellaManager.kt'>\r\n"]
[17.159423, "o", "\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/data/system/SystemStorageManager.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/AcmeApp.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/AppViewModelProvider.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/Navigation.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/components/ConfirmDialog.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/components/ActionRequiredScreen.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/components/DropdownMenu.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/components/Button.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/components/Icons.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/components/FAB.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/components/TextInput.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/components/messages/MessageExtensions.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/components/messages/MessageDisplay.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/components/messages/UIMessage.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/components/messages/MessageManager.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/screens/history/HistoryViewModel.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/screens/history/HistoryScreen.kt'>\r\n"]
[17.15946, "o", "\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/screens/recording/RecordingModel.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/screens/recording/RecordingViewModel.kt'>\r\n"]
[17.159596, "o", "\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/screens/tags/TagsScreen.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/screens/tags/TagsViewModel.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/screens/recording/RecordingScreen.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/theme/Color.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/theme/Theme.kt'>\r\n"]
[17.159671, "o", "\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/theme/Type.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/util/Ble.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/util/Error.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/util/Log.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/util/Extensions.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/util/File.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/util/Nfc.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/util/Permissions.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/util/Serialization.kt'>\r\n"]
[17.184352, "o", "\u001b[?2004h\u001b[0;32mmuaddib\u001b[0;36m@amtal \u001b[0m➜ \u001b[1;34m~/work/moberg/autodoc/acme-native \u001b[0;36m(\u001b[1;31mui-refactor\u001b[0;36m) \u001b[0m\r\r\n$ "]
[21.519077, "o", "dump '**.kt' | grep '^<file'"]
[23.054806, "o", "\b\b\b\b\b"]
[23.334246, "o", "\b\b\b\b\b\b\b\b"]
[23.751824, "o", "\b\b\b\b\b\b"]
[24.145987, "o", "\u001b[C"]
[24.320666, "o", "\u001b[C"]
[24.472944, "o", "\u001b[C"]
[24.964733, "o", "\u001b[C\u001b[1@ \b"]
[25.550127, "o", "\u001b[1@-"]
[25.817306, "o", "\u001b[1@i"]
[25.99622, "o", "\u001b[C\u001b[1@ \b"]
[26.176748, "o", "\u001b[1@'"]
[28.130908, "o", "\u001b[1@*"]
[28.44047, "o", "\u001b[1@/"]
[28.806516, "o", "\u001b[1@d"]
[29.078457, "o", "\u001b[1@a"]
[29.18949, "o", "\u001b[1@t"]
[29.299609, "o", "\u001b[1@a"]
[29.809055, "o", "\u001b[1@/"]
[30.192416, "o", "\u001b[1@*"]
[30.503774, "o", "\u001b[1@'"]
[31.427546, "o", "\r\n"]
[31.427821, "o", "\u001b[?2004l\r"]
[31.546573, "o", "\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/AcmeActivity.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/AcmeApplication.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/AcmeService.kt'>\r\n"]
[31.546773, "o", "\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/AcmeApp.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/AppViewModelProvider.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/components/ActionRequiredScreen.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/Navigation.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/components/ConfirmDialog.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/components/FAB.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/components/Button.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/components/Icons.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/components/TextInput.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/components/messages/MessageExtensions.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/components/messages/MessageDisplay.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/components/messages/MessageManager.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/components/messages/UIMessage.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/components/DropdownMenu.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/screens/recording/RecordingModel.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/screens/history/HistoryViewModel.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/screens/history/HistoryScreen.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/screens/tags/TagsScreen.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/theme/Color.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/screens/tags/TagsViewModel.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/screens/recording/RecordingViewModel.kt'>\r\n"]
[31.546889, "o", "\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/theme/Theme.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/theme/Type.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/ui/screens/recording/RecordingScreen.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/util/Ble.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/util/Extensions.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/util/Error.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/util/File.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/util/Log.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/util/Permissions.kt'>\r\n"]
[31.546954, "o", "\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/util/Serialization.kt'>\r\n\u001b[01;31m\u001b[K<file\u001b[m\u001b[K path='app/src/main/java/com/moberganalytics/acme/util/Nfc.kt'>\r\n"]
[31.56807, "o", "\u001b[?2004h\u001b[0;32mmuaddib\u001b[0;36m@amtal \u001b[0m➜ \u001b[1;34m~/work/moberg/autodoc/acme-native \u001b[0;36m(\u001b[1;31mui-refactor\u001b[0;36m) \u001b[0m\r\r\n$ "]
[34.810415, "o", "dump '**.kt' -i '*/data/*' | grep '^<file'"]
[35.545293, "o", "\b\u001b[K"]
[36.204929, "o", "\b\u001b[K"]
[36.245609, "o", "\b\u001b[K"]
[36.286488, "o", "\b\u001b[K"]
[36.325905, "o", "\b\u001b[K"]
[36.367136, "o", "\b\u001b[K"]
[36.407442, "o", "\b\u001b[K"]
[36.4483, "o", "\b\u001b[K"]
[36.48898, "o", "\b\u001b[K"]
[36.69582, "o", "\b\u001b[K"]
[36.805359, "o", "\b\u001b[K"]
[37.182623, "o", "\b\u001b[K"]
[37.350759, "o", "\b\u001b[K"]
[37.617707, "o", "l"]
[37.727994, "o", "e"]
[37.985802, "o", "s"]
[38.169567, "o", "s"]
[38.567997, "o", "\r\n"]
[38.568817, "o", "\u001b[?2004l\r"]
[38.573003, "o", "\u001b[?1049h\u001b[22;0;0t\u001b[?1h\u001b=\r"]
[38.686682, "o", "<file path='app/src/main/java/com/moberganalytics/acme/AcmeActivity.kt'>\r\npackage com.moberganalytics.acme\r\n\r\nimport android.content.BroadcastReceiver\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.IntentFilter\r\nimport android.nfc.NfcAdapter\r\nimport android.os.Bundle\r\nimport androidx.activity.ComponentActivity\r\nimport androidx.activity.compose.setContent\r\nimport androidx.activity.enableEdgeToEdge\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.lifecycle.lifecycleScope\r\nimport androidx.work.OneTimeWorkRequestBuilder\r\nimport androidx.work.WorkManager\r\nimport androidx.work.workDataOf\r\nimport com.moberganalytics.acme.data.recording.ExportWorker\r\nimport com.moberganalytics.acme.util.NfcUtil\r\nimport com.moberganalytics.acme.util.Log\r\nimport com.moberganalytics.acme.ui.AcmeApp\r\nimport com.moberganalytics.acme.ui.theme.*\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.launch\r\nimport kotlinx.coroutines.runBlocking\r\nimport kotlinx.coroutines.suspendCancellableCoroutine\r\nimp"]
[38.686879, "o", "ort kotlin.coroutines.resume\r\n\r\nprivate const val TAG = \"AcmeActivity\"\r\nprivate const val ACTION_SERVICE_STATUS = \"com.moberganalytics.acme.SERVICE_STATUS\"\r\nprivate const val EXTRA_CLIENT_COUNT = \"client_count\"\r\n\r\nclass AcmeActivity : ComponentActivity() {\r\n    private var nfcAdapter: NfcAdapter? = null\r\n    private val container by lazy { (application as AcmeApplication).container }\r\n    private val nfc by lazy { container.nfcCoordinator }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        val isSilentLaunch = intent?.data?.toString() == \"acme://silent\"\r\n        if (isSilentLaunch) {\r\n            Log.d(TAG, \"Silent launch detected, starting AcmeService\")\r\n            val serviceIntent = Intent(this, AcmeService::class.java)\r\n            ContextCompat.startForegroundService(this, serviceIntent)\r\n            finish()\r\n            return\r\n        }\r\n\r\n        nfcAdapter = NfcAdapter.getDefaultAdapter(this)\r\n        lifecycleScope.launch(Dispatchers.IO) { cleanupOrphanedRecordings() }\r\n        enableEdgeToEdge()\r\n        setContent { AcmeTheme { AcmeApp() } }\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        nfcAdapter?.let { NfcUtil.enableNfcInForeground(it, this) }\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n        nfcAdapter?.let { NfcUtil.disableNfcInForeground(it, this) }\r\n    }\r\n\r\n    override fun onNewIntent(intent: Intent) {\r\n        super.onNewIntent(intent)\r\n        Log.d(TAG, \"Detected NFC tag\")\r\n        nfc.manager.handleNfcIntent(intent)\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        if (isFinishing) {\r\n            runBlocking {\r\n                val hasClients = hasServiceClients()\r\n                if (!hasClients) {\r\n                    Log.d(TAG, \"No service clients, performing cleanup\")\r\n                    container.apply {\r\n:\u001b[K"]
[39.357408, "o", "\r\u001b[K/\r\u001b[K"]
[39.358086, "o", "\u001b[1;1H\u001b[7m<file\u001b[27m path='app/src/main/java/com/moberganalytics/acme/AcmeActivity.kt'>\r\n\u001b[2;1Hpackage com.moberganalytics.acme\r\n\u001b[3;1H\r\n\u001b[4;1Himport android.content.BroadcastReceiver\r\n\u001b[5;1Himport android.content.Context\r\n\u001b[6;1Himport android.content.Intent\r\n\u001b[7;1Himport android.content.IntentFilter\r\n\u001b[8;1Himport android.nfc.NfcAdapter\r\n\u001b[9;1Himport android.os.Bundle\r\n\u001b[10;1Himport androidx.activity.ComponentActivity\r\n\u001b[11;1Himport androidx.activity.compose.setContent\r\n\u001b[12;1Himport androidx.activity.enableEdgeToEdge\r\n\u001b[13;1Himport androidx.core.content.ContextCompat\r\n\u001b[14;1Himport androidx.lifecycle.lifecycleScope\r\n\u001b[15;1Himport androidx.work.OneTimeWorkRequestBuilder\r\n\u001b[16;1Himport androidx.work.WorkManager\r\n\u001b[17;1Himport androidx.work.workDataOf\r\n\u001b[18;1Himport com.moberganalytics.acme.data.recording.ExportWorker\r\n\u001b[19;1Himport com.moberganalytics.acme.util.NfcUtil\r\n\u001b[20;1Himport com.moberganalytics.acme.util.Log\r\n\u001b[21;1Himport com.moberganalytics.acme.ui.AcmeApp\r\n\u001b[22;1Himport com.moberganalytics.acme.ui.theme.*\r\n\u001b[23;1Himport kotlinx.coroutines.Dispatchers\r\n\u001b[24;1Himport kotlinx.coroutines.launch\r\n\u001b[25;1Himport kotlinx.coroutines.runBlocking\r\n\u001b[26;1Himport kotlinx.coroutines.suspendCancellableCoroutine\r\n\u001b[27;1Himport kotlin.coroutines.resume\r\n\u001b[28;1H\r\n\u001b[29;1Hprivate const val TAG = \"AcmeActivity\"\r\n\u001b[30;1Hprivate const val ACTION_SERVICE_STATUS = \"com.moberganalytics.acme.SERVICE_STATUS\"\r\n\u001b[31;1Hprivate const val EXTRA_CLIENT_COUNT = \"client_count\"\r\n\u001b[32;1H\r\n\u001b[33;1Hclass AcmeActivity : ComponentActivity() {\r\n\u001b[34;1H    private var nfcAdapter: NfcAdapter? = null\r\n\u001b[35;1H    private val container by lazy { (application as AcmeApplication).container }\r\n\u001b[36;1H    private val nfc by lazy { container.nfcCoordinator }\r\n\u001b[37;1H\r\n\u001b[38;1H    override fun onCreate(savedInstanceState: Bundle?) {\r\n\u001b[39;1H        super.onCreate(savedInstanceState)\r\n\u001b[40;1H\r\n\u001b[41;1H        val isSilentLaunch = intent?.data?.toString() == \"acme://silent\"\r\n\u001b[42;1H        if (isSilentLaunch) {\r\n\u001b[43;1H            Log.d(TAG, \"Silent launch detected, starting AcmeService\")\r\n\u001b[44;1H   "]
[39.358218, "o", "         val serviceIntent = Intent(this, AcmeService::class.java)\r\n\u001b[45;1H            ContextCompat.startForegroundService(this, serviceIntent)\r\n\u001b[46;1H            finish()\r\n\u001b[47;1H            return\r\n\u001b[48;1H        }\r\n\u001b[49;1H\r\n\u001b[50;1H        nfcAdapter = NfcAdapter.getDefaultAdapter(this)\r\n\u001b[51;1H        lifecycleScope.launch(Dispatchers.IO) { cleanupOrphanedRecordings() }\r\n\u001b[52;1H        enableEdgeToEdge()\r\n\u001b[53;1H        setContent { AcmeTheme { AcmeApp() } }\r\n\u001b[54;1H    }\r\n\u001b[55;1H\r\n\u001b[56;1H    override fun onResume() {\r\n\u001b[57;1H        super.onResume()\r\n\u001b[58;1H        nfcAdapter?.let { NfcUtil.enableNfcInForeground(it, this) }\r\n\u001b[59;1H    }\r\n\u001b[60;1H\r\n\u001b[61;1H    override fun onPause() {\r\n\u001b[62;1H        super.onPause()\r\n\u001b[63;1H        nfcAdapter?.let { NfcUtil.disableNfcInForeground(it, this) }\r\n\u001b[64;1H    }\r\n\u001b[65;1H\r\n\u001b[66;1H    override fun onNewIntent(intent: Intent) {\r\n\u001b[67;1H        super.onNewIntent(intent)\r\n\u001b[68;1H        Log.d(TAG, \"Detected NFC tag\")\r\n\u001b[69;1H        nfc.manager.handleNfcIntent(intent)\r\n\u001b[70;1H    }\r\n\u001b[71;1H\r\n\u001b"]
[39.358523, "o", "[72;1H    override fun onDestroy() {\r\n\u001b[73;1H        super.onDestroy()\r\n\u001b[74;1H        if (isFinishing) {\r\n\u001b[75;1H            runBlocking {\r\n\u001b[76;1H                val hasClients = hasServiceClients()\r\n\u001b[77;1H                if (!hasClients) {\r\n\u001b[78;1H                    Log.d(TAG, \"No service clients, performing cleanup\")\r\n\u001b[79;1H                    container.apply {\r\n\u001b[80;1H"]
[39.358915, "o", "...skipping...\r\n\u001b[7m<file\u001b[27m path='app/src/main/java/com/moberganalytics/acme/ui/AppViewModelProvider.kt'>\r\npackage com.moberganalytics.acme.ui\r\n\r\nimport androidx.lifecycle.ViewModelProvider.AndroidViewModelFactory\r\nimport androidx.lifecycle.viewmodel.CreationExtras\r\nimport androidx.lifecycle.viewmodel.initializer\r\nimport androidx.lifecycle.viewmodel.viewModelFactory\r\nimport com.moberganalytics.acme.AcmeApplication\r\nimport com.moberganalytics.acme.ui.screens.history.HistoryViewModel\r\nimport com.moberganalytics.acme.ui.screens.tags.TagsViewModel\r\nimport com.moberganalytics.acme.ui.screens.recording.RecordingViewModel\r\n\r\nobject AppViewModelProvider {\r\n    val Factory = viewModelFactory {\r\n        initializer {\r\n            val container = getApplication().container\r\n            TagsViewModel(\r\n                nfcCoordinator = container.nfcCoordinator,\r\n                resourceDao = container.database.resourceDao()\r\n            )\r\n        }\r\n        initializer {\r\n            val container = getApplication().container\r\n            R"]
[39.358998, "o", "ecordingViewModel(\r\n                recordingManager = container.recordingManager,\r\n                sensorManager = container.sensorManager,\r\n            )\r\n        }\r\n        initializer {\r\n            HistoryViewModel(\r\n                db = getApplication().container.database\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nfun CreationExtras.getApplication(): AcmeApplication =\r\n    (this[AndroidViewModelFactory.APPLICATION_KEY] as AcmeApplication)\r\n</file>\r\n\u001b[7m<file\u001b[27m path='app/src/main/java/com/moberganalytics/acme/AcmeService.kt'>\r\npackage com.moberganalytics.acme\r\n\r\nimport android.app.ActivityManager\r\nimport android.app.Service\r\nimport android.content.BroadcastReceiver\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.IntentFilter\r\nimport android.os.IBinder\r\nimport com.moberganalytics.acme.data.recording.RecordingStatus\r\nimport com.moberganalytics.acme.data.sensor.DataStreamingSensorDevice\r\nimport com.moberganalytics.acme.data.sensor.SensorData\r\nimport com.moberganalytics.acme.data.sensor.SensorResul"]
[39.359218, "o", "t\r\nimport com.moberganalytics.acme.data.sensor.SensorType\r\nimport com.moberganalytics.acme.util.Log\r\nimport io.ktor.server.application.install\r\nimport io.ktor.server.engine.ApplicationEngine\r\nimport io.ktor.server.engine.embeddedServer\r\nimport io.ktor.server.netty.Netty\r\nimport io.ktor.server.routing.routing\r\nimport io.ktor.server.websocket.WebSockets\r\nimport io.ktor.server.websocket.webSocket\r\nimport io.ktor.websocket.Frame\r\nimport io.ktor.websocket.WebSocketSession\r\nimport io.ktor.websocket.CloseReason\r\nimport io.ktor.websocket.close\r\nimport io.ktor.websocket.readText\r\nimport kotlinx.coroutines.Job\r\nimport kotlinx.coroutines.launch\r\nimport kotlinx.coroutines.runBlocking\r\nimport kotlinx.serialization.SerialName\r\nimport kotlinx.serialization.Serializable\r\nimport kotlinx.serialization.json.Json\r\nimport kotlinx.serialization.encodeToString\r\nimport java.util.Collections\r\n\r\nprivate const val TAG = \"AcmeService\"\r\nprivate const val WS_AUTH_TOKEN = \"acme_secret_token\"\r\nprivate const val ACTION_SERVICE_STATUS = \"com.moberganalytics.acme.SERVICE_STATUS\"\r\n:\u001b[K"]
[40.186313, "o", "\r\u001b[K/\r\u001b[K"]
[40.186387, "o", "private const val EXTRA_CLIENT_COUNT = \"client_count\"\r\n\r\n/**\r\n * A foreground service that maintains sensor connections and recording functionality,\r\n * and it hosts a WebSocket server for inter-process communication.\r\n */\r\nclass AcmeService : Service() {\r\n\r\n    private lateinit var ktorServer: ApplicationEngine\r\n    private val json = Json { ignoreUnknownKeys = true }\r\n    private val sessions = Collections.synchronizedSet(mutableSetOf<WebSocketSession>())\r\n    private val container by lazy { (applicationContext as AcmeApplication).container }\r\n    private var sensorDataCollectionJobs = mutableListOf<Job>()\r\n\r\n    private val exposedSensorTypes = setOf(\r\n        SensorType.GoPro,\r\n        SensorType.MasimoMightySat,\r\n        SensorType.MasimoEMMA\r\n    )\r\n\r\n    override fun onCreate() {\r\n        super.onCreate()\r\n        startForegroundServiceNotification()\r\n        startWebSocketServer()\r\n        observeSensorStates()\r\n        observeRecordingStates()\r\n        observeSensorDataStreams()\r\n        registerStatusReceiver()\r\n        Log.d"]
[40.186662, "o", "(TAG, \"Service created\")\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        sensorDataCollectionJobs.forEach { it.cancel() }\r\n        sensorDataCollectionJobs.clear()\r\n        ktorServer.stop(1000, 2000)\r\n        unregisterReceiver(statusReceiver)\r\n        if (sessions.isEmpty()) cleanup()\r\n        Log.d(TAG, \"Service destroyed\")\r\n:\u001b[K"]
[40.783546, "o", "\r\u001b[K/\r\u001b[K"]
[40.784996, "o", "...skipping...\r\n\u001b[7m<file\u001b[27m path='app/src/main/java/com/moberganalytics/acme/AcmeApplication.kt'>\r\npackage com.moberganalytics.acme\r\n\r\nimport android.app.Application\r\nimport com.moberganalytics.acme.data.IAppContainer\r\nimport com.moberganalytics.acme.data.AppContainer\r\n\r\nclass AcmeApplication : Application() {\r\n    lateinit var container: IAppContainer\r\n\r\n    override fun onCreate() {\r\n        super.onCreate()\r\n        container = AppContainer(this)\r\n\r\n        // Force eager initialization of NfcCoordinator so that tag scanning\r\n        // is handled as soon as the app starts, regardless of the current screen.\r\n        container.nfcCoordinator\r\n    }\r\n}\r\n</file>\r\n\u001b[7m<file\u001b[27m path='app/src/main/java/com/moberganalytics/acme/ui/AcmeApp.kt'>\r\npackage com.moberganalytics.acme.ui\r\n\r\nimport android.os.Build\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.compose.animation.slideInHorizontally\r\nimport androidx.compose.animation.slideOutHorizontally\r\nimport androidx.compose.animation.core.tween\r\nimport androidx.compose.foundation.layout.PaddingValues\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.navigation.NavHostController\r\nimport androidx.navigation.compose.NavHost\r\nimport androidx.navigation.compose.composable\r\nimport androidx.navigation.compose.currentBackStackEntryAsState\r\nimport androidx.navigation.compose.rememberNavController\r\nimport com.google.accompanist.permissions.ExperimentalPermissionsApi\r\nimport com.google.accompanist.permissions.rememberMultiplePermissionsState\r\nimport com.moberganalytics.acme.AcmeApplication\r\nimport com.moberganalytics.acme.R\r\nimport com.moberganalytics.acme.data.recording.RecordingStatus\r\nimport com."]
[40.785143, "o", "moberganalytics.acme.ui.components.ActionRequiredScreen\r\nimport com.moberganalytics.acme.ui.screens.history.HistoryScreen\r\nimport com.moberganalytics.acme.ui.screens.recording.RecordingScreen\r\nimport com.moberganalytics.acme.ui.screens.tags.TagsScreen\r\nimport com.moberganalytics.acme.ui.theme.AcmeTheme\r\nimport com.moberganalytics.acme.util.permissionsNeeded\r\n\r\n@RequiresApi(Build.VERSION_CODES.TIRAMISU)\r\n@OptIn(ExperimentalPermissionsApi::class)\r\n@Composable\r\nfun AcmeApp(navController: NavHostController = rememberNavController()) {\r\n    val context = LocalContext.current\r\n    val container =\r\n        remember { (context.applicationContext as AcmeApplication).container }\r\n\r\n    val isBluetoothEnabled by container.bleManager.isEnabled.collectAsState()\r\n    val isWifiEnabled by container.wifiManager.isEnabled.collectAsState()\r\n\r\n    val recordingState by container.recordingManager.recordingStatus.collectAsState()\r\n    val isRecording = recordingState is RecordingStatus.Active\r\n\r\n    val backStackEntry by navController.currentBackStackEntryAsState()\r\n    val currentDestination = backStackEntry?.destination\r\n    val currentScreen = AcmeScreen.fromRoute(currentDestination?.route)\r\n\r\n    val permissionState = rememberMultiplePermissionsState(permissionsNeeded)\r\n\r\n    Scaffold(\r\n        topBar = {\r\n            TopBar(\r\n:\u001b[K"]
[41.476748, "o", "\r\u001b[K/\r\u001b[K"]
[41.477074, "o", "                screen = currentScreen,\r\n                canNavigateBack = !currentScreen.showInNavBar,\r\n                navigateUp = { navController.navigateUp() },\r\n                navigateTo = navController::navigate\r\n            )\r\n        },\r\n        bottomBar = {\r\n            if (currentScreen.showInNavBar) {\r\n                NavBar(currentScreen, navController, isRecording)\r\n            }\r\n        },\r\n    ) { innerPadding ->\r\n        when {\r\n            !permissionState.allPermissionsGranted ->\r\n                ActionRequiredScreen(\r\n                    message = stringResource(R.string.permissions_required),\r\n                    buttonText = stringResource(R.string.grant_permissions),\r\n                    onBtnClick = { permissionState.launchMultiplePermissionRequest() },\r\n                    innerPadding = innerPadding\r\n                )\r\n:\u001b[K"]
[42.547383, "o", "\r\u001b[K\u001b[?1l\u001b>\u001b[?1049l\u001b[23;0;0t"]
[42.56891, "o", "\u001b[?2004h\u001b[0;32mmuaddib\u001b[0;36m@amtal \u001b[0m➜ \u001b[1;34m~/work/moberg/autodoc/acme-native \u001b[0;36m(\u001b[1;31mui-refactor\u001b[0;36m) \u001b[0m\r\r\n$ "]
[43.84183, "o", "dump '**.kt' -i '*/data/*' | less"]
[44.396788, "o", "\b\b\b\b"]
[44.934978, "o", "\b"]
[45.116619, "o", "\b"]
[45.310351, "o", "\b"]
[46.022929, "o", "\u001b[C\u001b[1@ \b"]
[46.207523, "o", "\u001b[1@-"]
[46.304676, "o", "\u001b[1@f"]
[46.924416, "o", "\u001b[C\u001b[1@ \b"]
[47.538036, "o", "\u001b[1@'"]
[48.726588, "o", "\u001b[1@^"]
[49.419963, "o", "\u001b[1@i"]
[49.606184, "o", "\u001b[1@m"]
[49.814394, "o", "\u001b[1@p"]
[49.990864, "o", "\u001b[1@o"]
[50.064141, "o", "\u001b[1@r"]
[50.228023, "o", "\u001b[1@t"]
[50.459712, "o", "\u001b[1@'"]
[51.027896, "o", "\u001b[C"]
[51.262121, "o", "\u001b[C"]
[51.513569, "o", "\u001b[C"]
[51.871405, "o", "\r\n"]
[51.871683, "o", "\u001b[?2004l\r"]
[51.87549, "o", "\u001b[?1049h\u001b[22;0;0t\u001b[?1h\u001b=\r"]
[51.989303, "o", "<file path='app/src/main/java/com/moberganalytics/acme/AcmeActivity.kt'>\r\npackage com.moberganalytics.acme\r\n\r\n\r\nprivate const val TAG = \"AcmeActivity\"\r\nprivate const val ACTION_SERVICE_STATUS = \"com.moberganalytics.acme.SERVICE_STATUS\"\r\nprivate const val EXTRA_CLIENT_COUNT = \"client_count\"\r\n\r\nclass AcmeActivity : ComponentActivity() {\r\n    private var nfcAdapter: NfcAdapter? = null\r\n    private val container by lazy { (application as AcmeApplication).container }\r\n    private val nfc by lazy { container.nfcCoordinator }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        val isSilentLaunch = intent?.data?.toString() == \"acme://silent\"\r\n        if (isSilentLaunch) {\r\n            Log.d(TAG, \"Silent launch detected, starting AcmeService\")\r\n            val serviceIntent = Intent(this, AcmeService::class.java)\r\n            ContextCompat.startForegroundService(this, serviceIntent)\r\n            finish()\r\n            return\r\n        }\r\n\r\n        nfcAdapter = NfcAdapter.getDefault"]
[51.989391, "o", "Adapter(this)\r\n        lifecycleScope.launch(Dispatchers.IO) { cleanupOrphanedRecordings() }\r\n        enableEdgeToEdge()\r\n        setContent { AcmeTheme { AcmeApp() } }\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        nfcAdapter?.let { NfcUtil.enableNfcInForeground(it, this) }\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n        nfcAdapter?.let { NfcUtil.disableNfcInForeground(it, this) }\r\n    }\r\n\r\n    override fun onNewIntent(intent: Intent) {\r\n        super.onNewIntent(intent)\r\n        Log.d(TAG, \"Detected NFC tag\")\r\n        nfc.manager.handleNfcIntent(intent)\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        if (isFinishing) {\r\n            runBlocking {\r\n                val hasClients = hasServiceClients()\r\n                if (!hasClients) {\r\n                    Log.d(TAG, \"No service clients, performing cleanup\")\r\n                    container.apply {\r\n                        stopRecording()\r\n                        disconnectSensors()\r\n                    }\r\n     "]
[51.989662, "o", "               val serviceIntent = Intent(this@AcmeActivity, AcmeService::class.java)\r\n                    stopService(serviceIntent)\r\n                } else {\r\n                    Log.d(TAG, \"Service has clients, leaving it running\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private suspend fun hasServiceClients(): Boolean = suspendCancellableCoroutine { cont ->\r\n        val receiver = object : BroadcastReceiver() {\r\n            override fun onReceive(context: Context, intent: Intent) {\r\n                val clientCount = intent.getIntExtra(EXTRA_CLIENT_COUNT, 0)\r\n                Log.d(TAG, \"Received service status: clientCount=$clientCount\")\r\n                cont.resume(clientCount > 0)\r\n                unregisterReceiver(this)\r\n            }\r\n        }\r\n        registerReceiver(receiver, IntentFilter(ACTION_SERVICE_STATUS), RECEIVER_NOT_EXPORTED)\r\n        val queryIntent = Intent(ACTION_SERVICE_STATUS).apply {\r\n            setClass(this@AcmeActivity, AcmeService::class.java)\r\n:\u001b[K"]
[53.08199, "o", "\r\u001b[K/\r\u001b[K"]
[53.082709, "o", "\u001b[1;1H\u001b[7m<file\u001b[27m path='app/src/main/java/com/moberganalytics/acme/AcmeActivity.kt'>\r\n\u001b[2;1Hpackage com.moberganalytics.acme\r\n\u001b[3;1H\r\n\u001b[4;1H\r\n\u001b[5;1Hprivate const val TAG = \"AcmeActivity\"\r\n\u001b[6;1Hprivate const val ACTION_SERVICE_STATUS = \"com.moberganalytics.acme.SERVICE_STATUS\"\r\n\u001b[7;1Hprivate const val EXTRA_CLIENT_COUNT = \"client_count\"\r\n\u001b[8;1H\r\n\u001b[9;1Hclass AcmeActivity : ComponentActivity() {\r\n\u001b[10;1H    private var nfcAdapter: NfcAdapter? = null\r\n\u001b[11;1H    private val container by lazy { (application as AcmeApplication).container }\r\n\u001b[12;1H    private val nfc by lazy { container.nfcCoordinator }\r\n\u001b[13;1H\r\n\u001b[14;1H    override fun onCreate(savedInstanceState: Bundle?) {\r\n\u001b[15;1H        super.onCreate(savedInstanceState)\r\n\u001b[16;1H\r\n\u001b[17;1H        val isSilentLaunch = intent?.data?.toString() == \"acme://silent\"\r\n\u001b[18;1H        if (isSilentLaunch) {\r\n\u001b[19;1H            Log.d(TAG, \"Silent launch detected, starting AcmeService\")\r\n\u001b[20;1H            val serviceIntent = Intent(this, AcmeService::class.java)\r\n\u001b[21;1H            Cont"]
[53.082863, "o", "extCompat.startForegroundService(this, serviceIntent)\r\n\u001b[22;1H            finish()\r\n\u001b[23;1H            return\r\n\u001b[24;1H        }\r\n\u001b[25;1H\r\n\u001b[26;1H        nfcAdapter = NfcAdapter.getDefaultAdapter(this)\r\n\u001b[27;1H        lifecycleScope.launch(Dispatchers.IO) { cleanupOrphanedRecordings() }\r\n\u001b[28;1H        enableEdgeToEdge()\r\n\u001b[29;1H        setContent { AcmeTheme { AcmeApp() } }\r\n\u001b[30;1H    }\r\n\u001b[31;1H\r\n\u001b[32;1H    override fun onResume() {\r\n\u001b[33;1H        super.onResume()\r\n\u001b[34;1H        nfcAdapter?.let { NfcUtil.enableNfcInForeground(it, this) }\r\n\u001b[35;1H    }\r\n\u001b[36;1H\r\n\u001b[37;1H    override fun onPause() {\r\n\u001b[38;1H        super.onPause()\r\n\u001b[39;1H        nfcAdapter?.let { NfcUtil.disableNfcInForeground(it, this) }\r\n\u001b[40;1H    }\r\n\u001b[41;1H\r\n\u001b[42;1H    override fun onNewIntent(intent: Intent) {\r\n\u001b[43;1H        super.onNewIntent(intent)\r\n\u001b[44;1H        Log.d(TAG, \"Detected NFC tag\")\r\n\u001b[45;1H        nfc.manager.handleNfcIntent(intent)\r\n\u001b[46;1H    }\r\n\u001b[47;1H\r\n\u001b[48;1H    override fun onDestroy() {\r\n\u001b[49;1H        super.onDestroy()\r\n\u001b[50;1H        if (i"]
[53.082996, "o", "sFinishing) {\r\n\u001b[51;1H            runBlocking {\r\n\u001b[52;1H                val hasClients = hasServiceClients()\r\n\u001b[53;1H                if (!hasClients) {\r\n\u001b[54;1H                    Log.d(TAG, \"No service clients, performing cleanup\")\r\n\u001b[55;1H                    container.apply {\r\n\u001b[56;1H                        stopRecording()\r\n\u001b[57;1H                        disconnectSensors()\r\n\u001b[58;1H                    }\r\n\u001b[59;1H                    val serviceIntent = Intent(this@AcmeActivity, AcmeService::class.java)\r\n\u001b[60;1H                    stopService(serviceIntent)\r\n\u001b[61;1H                } else {\r\n\u001b[62;1H                    Log.d(TAG, \"Service has clients, leaving it running\")\r\n\u001b[63;1H                }\r\n\u001b[64;1H            }\r\n\u001b[65;1H        }\r\n\u001b[66;1H    }\r\n\u001b[67;1H\r\n\u001b[68;1H    private suspend fun hasServiceClients(): Boolean = suspendCancellableCoroutine { cont ->\r\n\u001b[69;1H        val receiver = object : BroadcastReceiver() {\r\n\u001b[70;1H            override fun onReceive(context: Context, intent: Intent) {\r\n\u001b[71;1H                val clientC"]
[53.083288, "o", "ount = intent.getIntExtra(EXTRA_CLIENT_COUNT, 0)\r\n\u001b[72;1H                Log.d(TAG, \"Received service status: clientCount=$clientCount\")\r\n\u001b[73;1H                cont.resume(clientCount > 0)\r\n\u001b[74;1H                unregisterReceiver(this)\r\n\u001b[75;1H            }\r\n\u001b[76;1H        }\r\n\u001b[77;1H        registerReceiver(receiver, IntentFilter(ACTION_SERVICE_STATUS), RECEIVER_NOT_EXPORTED)\r\n\u001b[78;1H        val queryIntent = Intent(ACTION_SERVICE_STATUS).apply {\r\n\u001b[79;1H            setClass(this@AcmeActivity, AcmeService::class.java)\r\n\u001b[80;1H"]
[53.083609, "o", "...skipping...\r\n\u001b[7m<file\u001b[27m path='app/src/main/java/com/moberganalytics/acme/AcmeApplication.kt'>\r\npackage com.moberganalytics.acme\r\n\r\n\r\nclass AcmeApplication : Application() {\r\n    lateinit var container: IAppContainer\r\n\r\n    override fun onCreate() {\r\n        super.onCreate()\r\n        container = AppContainer(this)\r\n\r\n        // Force eager initialization of NfcCoordinator so that tag scanning\r\n        // is handled as soon as the app starts, regardless of the current screen.\r\n        container.nfcCoordinator\r\n    }\r\n}\r\n</file>\r\n\u001b[7m<file\u001b[27m path='app/src/main/java/com/moberganalytics/acme/AcmeService.kt'>\r\npackage com.moberganalytics.acme\r\n\r\n\r\nprivate const val TAG = \"AcmeService\"\r\nprivate const val WS_AUTH_TOKEN = \"acme_secret_token\"\r\nprivate const val ACTION_SERVICE_STATUS = \"com.moberganalytics.acme.SERVICE_STATUS\"\r\nprivate const val EXTRA_CLIENT_COUNT = \"client_count\"\r\n\r\n/**\r\n * A foreground service that maintains sensor connections and recording functionality,\r\n * and it hosts a WebSocket server for inter-process communicat"]
[53.083668, "o", "ion.\r\n */\r\nclass AcmeService : Service() {\r\n\r\n    private lateinit var ktorServer: ApplicationEngine\r\n    private val json = Json { ignoreUnknownKeys = true }\r\n    private val sessions = Collections.synchronizedSet(mutableSetOf<WebSocketSession>())\r\n    private val container by lazy { (applicationContext as AcmeApplication).container }\r\n    private var sensorDataCollectionJobs = mutableListOf<Job>()\r\n\r\n    private val exposedSensorTypes = setOf(\r\n        SensorType.GoPro,\r\n        SensorType.MasimoMightySat,\r\n        SensorType.MasimoEMMA\r\n    )\r\n\r\n    override fun onCreate() {\r\n        super.onCreate()\r\n        startForegroundServiceNotification()\r\n"]
[53.083712, "o", "        startWebSocketServer()\r\n        observeSensorStates()\r\n        observeRecordingStates()\r\n        observeSensorDataStreams()\r\n        registerStatusReceiver()\r\n        Log.d(TAG, \"Service created\")\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        sensorDataCollectionJobs.forEach { it.cancel() }\r\n        sensorDataCollectionJobs.clear()\r\n        ktorServer.sto"]
[53.083876, "o", "p(1000, 2000)\r\n        unregisterReceiver(statusReceiver)\r\n        if (sessions.isEmpty()) cleanup()\r\n        Log.d(TAG, \"Service destroyed\")\r\n    }\r\n\r\n    override fun onBind(intent: Intent?): IBinder? = null\r\n\r\n    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\r\n        return START_STICKY\r\n    }\r\n\r\n    private fun cleanup() = runBlocking {\r\n        container.apply {\r\n            stopRecording()\r\n            disconnectSensors()\r\n        }\r\n    }\r\n\r\n    /**\r\n:\u001b[K"]
[53.640951, "o", "\r\u001b[K/\r\u001b[K"]
[53.641013, "o", "     * Start the foreground service with a persistent notification.\r\n     */\r\n    private fun startForegroundServiceNotification() {\r\n        val notification =\r\n            container.notificationHelper.createServiceNotification(AcmeActivity::class.java)\r\n        val notificationId = container.notificationHelper.getServiceNotificationId()\r\n        startForeground(notificationId, notification)\r\n    }\r\n\r\n    /**\r\n     * Starts an embedded Ktor WebSocket server listening on localhost port 8070.\r\n     * Includes basic authentication using a token query parameter.\r\n     */\r\n    private fun startWebSocketServer() {\r\n        // TODO: figure out error handling for port already in use\r\n        ktorServer = embeddedServer(Netty, port = 8070) {\r\n            install(WebSockets)\r\n:\u001b[K"]
[54.096192, "o", "\r\u001b[K/\r\u001b[K"]
[54.097586, "o", "...skipping...\r\n\u001b[7m<file\u001b[27m path='app/src/main/java/com/moberganalytics/acme/ui/Navigation.kt'>\r\npackage com.moberganalytics.acme.ui\r\n\r\n\r\n\r\nsealed class AcmeScreen(\r\n    val id: Int,\r\n    val route: String,\r\n    @StringRes val title: Int,\r\n    @DrawableRes val icon: Int? = null,\r\n    val showInNavBar: Boolean = true\r\n) {\r\n\r\n    data object Recording : AcmeScreen(\r\n        id = 1,\r\n        route = \"recording\",\r\n        title = R.string.record,\r\n        icon = R.drawable.ic_record,\r\n    )\r\n\r\n    data object History : AcmeScreen(\r\n        id = 2,\r\n        route = \"history\",\r\n        title = R.string.history,\r\n        icon = R.drawable.ic_history,\r\n    )\r\n\r\n    data object Tags : AcmeScreen(\r\n        id = 3,\r\n        route = \"tags\",\r\n        title = R.string.tags,\r\n        icon = R.drawable.ic_nfc,\r\n        showInNavBar = false\r\n    )\r\n\r\n    companion object {\r\n        fun values() = AcmeScreen::class.sealedSubclasses\r\n            .mapNotNull { it.objectInstance }\r\n            .sortedBy { it.id }\r\n\r\n        fun fromRoute(route: String?): AcmeScreen "]
[54.097643, "o", "=\r\n            values().find { it.route == route } ?: Recording\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun TopBar(\r\n    screen: AcmeScreen,\r\n    canNavigateBack: Boolean,\r\n    navigateUp: () -> Unit,\r\n    navigateTo: (String) -> Unit\r\n) {\r\n    var showMenu by remember { mutableStateOf(false) }\r\n\r\n    TopAppBar(\r\n        title = {\r\n            Text(\r\n                text = stringResource(screen.title),\r\n                style = MaterialTheme.typography.headlineSmall.copy(fontWeight = FontWeight.SemiBold)\r\n            )\r\n        },\r\n        colors = TopAppBarDefaults.mediumTopAppBarColors(\r\n            containerColor = MaterialTheme.colorScheme.background\r\n        ),\r\n        navigationIcon = {\r\n            if (canNavigateBack) {\r\n                IconButton(onClick = navigateUp) {\r\n                    Icon(\r\n                        imageVector = Icons.AutoMirrored.Filled.ArrowBack,\r\n                        contentDescription = stringResource(R.string.back_button)\r\n                    )\r\n                }\r\n          "]
[54.097836, "o", "  }\r\n        },\r\n        actions = {\r\n            if (!canNavigateBack) { // only show on main screens\r\n                IconButton(onClick = { showMenu = true }) {\r\n                    Icon(\r\n:\u001b[K"]
[54.584932, "o", "\r\u001b[K/\r\u001b[K"]
[54.58561, "o", "...skipping...\r\n\u001b[7m<file\u001b[27m path='app/src/main/java/com/moberganalytics/acme/ui/AcmeApp.kt'>\r\npackage com.moberganalytics.acme.ui\r\n\r\n\r\n@RequiresApi(Build.VERSION_CODES.TIRAMISU)\r\n@OptIn(ExperimentalPermissionsApi::class)\r\n@Composable\r\nfun AcmeApp(navController: NavHostController = rememberNavController()) {\r\n    val context = LocalContext.current\r\n    val container =\r\n        remember { (context.applicationContext as AcmeApplication).container }\r\n\r\n    val isBluetoothEnabled by container.bleManager.isEnabled.collectAsState()\r\n    val isWifiEnabled by container.wifiManager.isEnabled.collectAsState()\r\n\r\n    val recordingState by container.recordingManager.recordingStatus.collectAsState()\r\n    val isRecording = recordingState is RecordingStatus.Active\r\n\r\n    val backStackEntry by navController.currentBackStackEntryAsState()\r\n    val currentDestination = backStackEntry?.destination\r\n    val currentScreen = AcmeScreen.fromRoute(currentDestination?.route)\r\n\r\n    val permissionState = rememberMultiplePermissionsState(permissionsNeeded)\r\n\r\n    Scaffold(\r\n        topBar = {\r\n            TopBar(\r\n                screen = currentScreen,\r\n                canNavigateBack = !currentScreen.showInNavBar,\r\n                navigateUp = { navController.navigateUp() },\r\n                navigateTo = navController::navigate\r\n            )\r\n        },\r\n        bottomBar = {"]
[54.585665, "o", "\r\n            if (currentScreen.showInNavBar) {\r\n                NavBar(currentScreen, navController, isRecording)\r\n            }\r\n        },\r\n    ) { innerPadding ->\r\n        when {\r\n            !permissionState.allPermissionsGranted ->\r\n                ActionRequiredScreen(\r\n                    message = stringResource(R.string.permissions_required),\r\n                    buttonText = stringResource(R.string.grant_permissions),\r\n                    onBtnClick = { permissionState.launchMultiplePermissionRequest() },\r\n                    innerPadding = innerPadding\r\n                )\r\n\r\n            !isBluetoothEnabled ->\r\n                ActionRequiredScreen(\r\n                    message = stringResource(R.string"]
[54.585775, "o", ".bluetooth_required),\r\n                    buttonText = stringResource(R.string.enable_bluetooth),\r\n                    onBtnClick = container.bleManager::enableAdapter,\r\n                    innerPadding = innerPadding\r\n                )\r\n\r\n            !isWifiEnabled ->\r\n                ActionRequiredScreen(\r\n                    message = stringResource(R.string.wifi_required),\r\n                    buttonText = stringResource(R.string.enable_wifi),\r\n                    onBtnClick = container.wifiManager::enableAdapter,\r\n                    innerPadding = innerPadding\r\n                )\r\n\r\n            else -> ScreenNavigation(innerPadding, navController)\r\n        }\r\n    }\r\n}\r\n\r\n@Preview\r\n@Composable\r\nprivate fun AcmeAppPreview() {\r\n    AcmeTheme { AcmeApp() }\r\n}\r\n\r\n@Composable\r\nprivate fun ScreenNavigation(\r\n    innerPadding: PaddingValues,\r\n    navController: NavHostController\r\n:\u001b[K"]
[54.979965, "o", "\r\u001b[K\u001b[?1l\u001b>\u001b[?1049l\u001b[23;0;0t"]
[55.004103, "o", "\u001b[?2004h\u001b[0;32mmuaddib\u001b[0;36m@amtal \u001b[0m➜ \u001b[1;34m~/work/moberg/autodoc/acme-native \u001b[0;36m(\u001b[1;31mui-refactor\u001b[0;36m) \u001b[0m\r\r\n$ "]
[55.993367, "o", "\u001b[?2004l\r\r\nexit\r\n"]
